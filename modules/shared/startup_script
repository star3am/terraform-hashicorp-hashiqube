#!/bin/bash -x
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
echo USER-DATA BEGIN $(date '+%Y-%m-%d %H:%M:%S')
# determine which cloud we are in and set some variables
if [[ $(dmidecode -s bios-version) =~ .*\.amazon ]] || [[ $(dmidecode -s bios-vendor) =~ Amazon ]]
then
  echo "This is AWS"
  DC=aws
  INSTANCE_PRIVATE_IP=$(hostname --all-ip-addresses | cut -d ' ' -f1)
  INSTANCE_IP=$(curl -s 'https://api.ipify.org?format=text')
  HASHIQUBE_IP="10.9.99.11"
  HASHIQUBE_AWS_IP=${HASHIQUBE_AWS_IP}
  HASHIQUBE_AZURE_IP=${HASHIQUBE_AZURE_IP}
  HASHIQUBE_GCP_IP=${HASHIQUBE_GCP_IP}
  HOSTNAME=hashiqube-aws
  FQDN=hashiqube-aws.service.consul
  VAGRANT_PROVISIONERS=${VAGRANT_PROVISIONERS}
elif [[ $(dmidecode -s bios-version) =~ Google ]]
then
  echo "This is GCP"
  DC=gcp
  INSTANCE_PRIVATE_IP=$(hostname --all-ip-addresses | cut -d ' ' -f1)
  INSTANCE_IP=$(curl -s 'https://api.ipify.org?format=text')
  HASHIQUBE_IP="10.9.99.12"
  HASHIQUBE_GCP_IP=${HASHIQUBE_GCP_IP}
  HASHIQUBE_AZURE_IP=${HASHIQUBE_AZURE_IP}
  HASHIQUBE_AWS_IP=${HASHIQUBE_AWS_IP}
  HOSTNAME=hashiqube-gcp
  FQDN=hashiqube-gcp.service.consul
  VAGRANT_PROVISIONERS=${VAGRANT_PROVISIONERS}
else
  echo "This is Azure"
  DC=azure
  INSTANCE_PRIVATE_IP=$(hostname --all-ip-addresses | cut -d ' ' -f1)
  INSTANCE_IP=$(curl -s 'https://api.ipify.org?format=text')
  HASHIQUBE_IP="10.9.99.13"
  HASHIQUBE_AZURE_IP=${HASHIQUBE_AZURE_IP}
  HASHIQUBE_AWS_IP=${HASHIQUBE_AWS_IP}
  HASHIQUBE_GCP_IP=${HASHIQUBE_GCP_IP}
  HOSTNAME=hashiqube-azure
  FQDN=hashiqube-azure.service.consul
  VAGRANT_PROVISIONERS=${VAGRANT_PROVISIONERS}
fi
# set hostname
echo "$HOSTNAME" > /etc/hostname
hostname "$HOSTNAME"
sed -i "s/.*127.0.0.1.*/127.0.0.1 $FQDN $HOSTNAME localhost/g" /etc/hosts
# install basetools
DEBIAN_FRONTEND=noninteractive apt-get update -qq < /dev/null > /dev/null
DEBIAN_FRONTEND=noninteractive apt-get --assume-yes install -qq swapspace curl unzip jq git update-motd toilet figlet apt-transport-https ca-certificates gnupg-agent software-properties-common mc < /dev/null > /dev/null
# adding PubkeyAcceptedKeyTypes=+ssh-rsa to /etc/ssh/sshd_config
grep -q "PubkeyAcceptedKeyTypes" /etc/ssh/sshd_config
if [ $? -eq 1 ]; then
  echo "PubkeyAcceptedKeyTypes=+ssh-rsa" >> /etc/ssh/sshd_config
else
  sed -i "s/PubkeyAcceptedKeyTypes.*/PubkeyAcceptedKeyTypes=+ssh-rsa/g" /etc/ssh/sshd_config
fi
systemctl reload ssh
# set motd
mkdir -p /etc/update-motd.d
cat <<EOF | tee /etc/update-motd.d/00-header
#!/bin/bash
/usr/bin/toilet --gay -f standard hashiqube-aws -w 170
printf "%s"

printf "\n"
printf " * Hashiqube Documentation:  https://hashiqube.com\n"
printf " * See User Data Log:        tail -f /var/log/user-data.log\n"
printf " * Get Vault Root token:     vagrant ssh -c 'cat /etc/vault/init.file'\n"
printf " * Get Vault Status:         vault status\n"
printf " * Get Nomad Job Status:     nomad job status\n"
printf " * Get Nomad Server Members: nomad server members\n"
printf " * Get Consul Info:          consul info\n"
printf " * Get Consul Members:       consul members -wan\n"
printf " * Get Waypoint Token:       vagrant ssh -c 'cat /home/vagrant/.waypoint-nomad-token'\n"
printf " * SSH into Hashiqube:       cd hashiqube; vagrant ssh\n"
printf "\n"
EOF
# remove unneeded motd files
for i in $(ls /etc/update-motd.d/ | grep -v landscape | grep -v header); do rm /etc/update-motd.d/$i; done
# set bash aliases
cat <<EOF | sudo -u ubuntu tee /home/ubuntu/.bash_aliases
alias vagrant='cd /home/ubuntu/hashiqube; vagrant'
nomad() { cd /home/ubuntu/hashiqube; vagrant ssh -c "nomad \$1 \$2 \$3 \$4 \$5" ;}
consul() { cd /home/ubuntu/hashiqube; vagrant ssh -c "consul \$1 \$2 \$3 \$4 \$5" ;}
vault() { cd /home/ubuntu/hashiqube; vagrant ssh -c "vault \$1 \$2 \$3 \$4 \$5" ;}
waypoint() { cd /home/ubuntu/hashiqube; vagrant ssh -c "waypoint \$1 \$2 \$3 \$4 \$5" ;}
boundary() { cd /home/ubuntu/hashiqube; vagrant ssh -c "boundary \$1 \$2 \$3 \$4 \$5" ;}
EOF
# install docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" < /dev/null > /dev/null
DEBIAN_FRONTEND=noninteractive apt-get update -qq < /dev/null > /dev/null
# BUG: https://github.com/kubernetes-sigs/kind/issues/3223 unable to use kubectl exec
DEBIAN_FRONTEND=noninteractive apt-get install -qq --allow-downgrades --assume-yes docker-ce < /dev/null > /dev/null
usermod -aG docker ubuntu
service docker restart
# install vagrant
wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install -y -qq vagrant < /dev/null > /dev/null
# clone and run hashiqube
sudo -u ubuntu git clone https://github.com/star3am/hashiqube.git /home/ubuntu/hashiqube
cd /home/ubuntu/hashiqube
# set trex background
sudo -u ubuntu cp /home/ubuntu/hashiqube/trex/trex-nodejs/public/hashicorp-unlock-the-cloud-operating-model-$DC.png /home/ubuntu/hashiqube/trex/trex-nodejs/public/hashicorp-unlock-the-cloud-operating-model.png
# set different IPs for the nodes
for i in $(grep -Rlz '10.9.99.10' /home/ubuntu/hashiqube/); do sudo -u ubuntu sed -i "s/10.9.99.10/$HASHIQUBE_IP/g" $i; done < /dev/null > /dev/null
# set different Hostnames for the nodes
for i in $(grep -Rlz 'hashiqube0' /home/ubuntu/hashiqube/); do sudo -u ubuntu sed -i "s/hashiqube0/hashiqube-$DC/g" $i; done < /dev/null > /dev/null
# set different DCs for the nodes
for i in $(grep -Rlz 'dc1' /home/ubuntu/hashiqube/); do sudo -u ubuntu sed -i "s/dc1/$DC/g" $i; done < /dev/null > /dev/null
# consul configs
for i in $(grep -Rlz "$HASHIQUBE_IP" /home/ubuntu/hashiqube/consul/consul.sh); do sudo -u ubuntu sed -i "s/$HASHIQUBE_IP/$INSTANCE_IP/g" $i; done < /dev/null > /dev/null
# vault configs
for i in $(grep -Rlz "$HASHIQUBE_IP" /home/ubuntu/hashiqube/vault/vault.sh); do sudo -u ubuntu sed -i "s/$HASHIQUBE_IP/$INSTANCE_IP/g" $i; done < /dev/null > /dev/null
sudo -u ubuntu vagrant up --provision-with ${VAGRANT_PROVISIONERS}
# cluster join
if [[ $HASHIQUBE_AZURE_IP ]]; then
  sudo -u ubuntu vagrant ssh -c "consul join -wan ${HASHIQUBE_AZURE_IP}"
  sudo -u ubuntu vagrant ssh -c "consul members -wan"
  sudo -u ubuntu vagrant ssh -c "nomad server join ${HASHIQUBE_AZURE_IP}"
  sudo -u ubuntu vagrant ssh -c "nomad server members"
  sudo -u ubuntu vagrant ssh -c "vault operator raft join http://${HASHIQUBE_AZURE_IP}:8200"
  sudo -u ubuntu vagrant ssh -c "vault operator raft list-peers"
fi
if [[ $HASHIQUBE_AWS_IP ]]; then
  sudo -u ubuntu vagrant ssh -c "consul join -wan ${HASHIQUBE_AWS_IP}"
  sudo -u ubuntu vagrant ssh -c "consul members -wan"
  sudo -u ubuntu vagrant ssh -c "nomad server join ${HASHIQUBE_AWS_IP}"
  sudo -u ubuntu vagrant ssh -c "nomad server members"
  sudo -u ubuntu vagrant ssh -c "vault operator raft join http://${HASHIQUBE_AWS_IP}:8200"
  sudo -u ubuntu vagrant ssh -c "vault operator raft list-peers"
fi
if [[ $HASHIQUBE_GCP_IP ]]; then
  sudo -u ubuntu vagrant ssh -c "consul join -wan ${HASHIQUBE_GCP_IP}"
  sudo -u ubuntu vagrant ssh -c "consul members -wan"
  sudo -u ubuntu vagrant ssh -c "nomad server join ${HASHIQUBE_GCP_IP}"
  sudo -u ubuntu vagrant ssh -c "nomad server members"
  sudo -u ubuntu vagrant ssh -c "vault operator raft join http://${HASHIQUBE_GCP_IP}:8200"
  sudo -u ubuntu vagrant ssh -c "vault operator raft list-peers"
fi
echo "Hashiqube Setup Complete"
echo USER-DATA END $(date '+%Y-%m-%d %H:%M:%S')
